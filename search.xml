<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>以梦为马，不负韶华</title>
    <url>/2020/05/20/%E9%9A%8F%E7%AC%94/benxi/</url>
    <content><![CDATA[<hr>
<blockquote class="blockquote-center">如果你真的愿意去努力，你人生最坏的结果，也不过是大器晚成。</blockquote>

<p> ​​​</p>
]]></content>
      <categories>
        <category>全世界最好的苏潼</category>
      </categories>
      <tags>
        <tag>ytt</tag>
      </tags>
  </entry>
  <entry>
    <title>js部分基础语法</title>
    <url>/2020/12/14/js/js%E9%83%A8%E5%88%86%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<p>js基础语法总结</p>
<a id="more"></a>
<hr>
<h3 id="递增和递减运算符"><a href="#递增和递减运算符" class="headerlink" title="递增和递减运算符"></a>递增和递减运算符</h3><ul>
<li><p>递增运算符</p>
<ul>
<li><p>前置递增运算符</p>
<p>  ++num 前置递增，就是自加1，类似于 num =  num + 1，但是 ++num 写起来更简单。</p>
<p>  使用口诀：先自加，后返回值</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span>  num = <span class="number">10</span>;</span><br><span class="line">alert(++num + <span class="number">10</span>);   <span class="comment">// 21</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>后置递增运算符</p>
<p>num++ 后置递增，就是自加1，类似于 num =  num + 1 ，但是 num++ 写起来更简单。</p>
<p>使用口诀：先返回原值，后自加 </p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span>  num = <span class="number">10</span>;</span><br><span class="line">alert(<span class="number">10</span> + num++);  <span class="comment">// 20</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><ul>
<li><p>短路运算（逻辑中断）</p>
<p> 短路运算的原理：当有多个表达式（值）时,左边的表达式值可以确定结果时,就不再继续运算右边的表达式的值;</p>
<ul>
<li><p>逻辑与</p>
<p>  语法： 表达式1 &amp;&amp; 表达式2</p>
<pre><code>  - 如果第一个表达式的值为真，则返回表达式2

  - 如果第一个表达式的值为假，则返回表达式1</code></pre>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( <span class="number">123</span> &amp;&amp; <span class="number">456</span> );        <span class="comment">// 456</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="number">0</span> &amp;&amp; <span class="number">456</span> );          <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="number">123</span> &amp;&amp; <span class="number">456</span>&amp;&amp; <span class="number">789</span> );  <span class="comment">// 789</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>逻辑或</p>
<p> 语法： 表达式1 || 表达式2</p>
<pre><code> - 如果第一个表达式的值为真，则返回表达式1

 - 如果第一个表达式的值为假，则返回表达式2</code></pre>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( <span class="number">123</span> || <span class="number">456</span> );         <span class="comment">//  123</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="number">0</span> ||  <span class="number">456</span> );          <span class="comment">//  456</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="number">123</span> || <span class="number">456</span> || <span class="number">789</span> );  <span class="comment">//  123</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<hr>
<h3 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h3><p>JS 中创建数组有两种方式：</p>
<ul>
<li><p>利用  new 创建数组  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> 数组名 = <span class="keyword">new</span> <span class="built_in">Array</span>() ；</span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>();   <span class="comment">// 创建一个新的空数组</span></span><br></pre></td></tr></table></figure>

<p>注意 Array () ，A 要大写    </p>
</li>
<li><p>利用数组字面量创建数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1. 使用数组字面量方式创建空的数组</span></span><br><span class="line"><span class="keyword">var</span>  数组名 = []；</span><br><span class="line"><span class="comment">//2. 使用数组字面量方式创建带初始值的数组</span></span><br><span class="line"><span class="keyword">var</span>  数组名 = [<span class="string">&#x27;小白&#x27;</span>,<span class="string">&#x27;小黑&#x27;</span>,<span class="string">&#x27;大黄&#x27;</span>,<span class="string">&#x27;瑞奇&#x27;</span>];</span><br></pre></td></tr></table></figure>

<ul>
<li>数组的字面量是方括号 [ ] </li>
<li>声明数组并赋值称为数组的初始化</li>
<li>这种字面量方式也是我们以后最多使用的方式</li>
</ul>
</li>
</ul>
<h3 id="数组中新增元素"><a href="#数组中新增元素" class="headerlink" title="数组中新增元素"></a>数组中新增元素</h3><p>​        数组中可以通过以下方式在数组的末尾插入新元素：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">数组[ 数组.length ] = 新数据;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="arguments的使用"><a href="#arguments的使用" class="headerlink" title="arguments的使用"></a>arguments的使用</h3><p>​        当不确定有多少个参数传递的时候，可以用 arguments 来获取。JavaScript 中，arguments实际上它是当前函数的一个内置对象。所有函数都内置了一个 arguments 对象，arguments 对象中存储了传递的所有实参。arguments展示形式是一个伪数组，因此可以进行遍历。伪数组具有以下特点：</p>
<ul>
<li><p>具有 length 属性</p>
</li>
<li><p>按索引方式储存数据</p>
</li>
<li><p>不具有数组的 push , pop 等方法</p>
<p>注意：在函数内部使用该对象，用此对象获取函数调用时传的实参。</p>
</li>
</ul>
<hr>
<h3 id="创建对象的三种方式"><a href="#创建对象的三种方式" class="headerlink" title="创建对象的三种方式"></a>创建对象的三种方式</h3><ul>
<li><p>利用字面量创建对象 </p>
<p>  代码如下：</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> star = &#123;</span><br><span class="line">    name : <span class="string">&#x27;pink&#x27;</span>,</span><br><span class="line">    age : <span class="number">18</span>,</span><br><span class="line">    sex : <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">    sayHi : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="string">&#x27;大家好啊~&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


</li>
</ul>
<ul>
<li><p>利用 new Object 创建对象 </p>
<ul>
<li><p>创建空对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> andy = <span class="keyword">new</span> Obect();</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>利用构造函数创建对象</p>
<ul>
<li><p>构造函数</p>
<ul>
<li><p>构造函数：是一种特殊的函数，主要用来初始化对象，即为对象成员变量赋初始值，它总与 new 运算符一起使用。我们可以把对象中一些公共的属性和方法抽取出来，然后封装到这个函数里面。</p>
</li>
<li><p>构造函数的封装格式：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 构造函数名(<span class="params">形参<span class="number">1</span>,形参<span class="number">2</span>,形参<span class="number">3</span></span>) </span>&#123;</span><br><span class="line">     <span class="built_in">this</span>.属性名<span class="number">1</span> = 参数<span class="number">1</span>;</span><br><span class="line">     <span class="built_in">this</span>.属性名<span class="number">2</span> = 参数<span class="number">2</span>;</span><br><span class="line">     <span class="built_in">this</span>.属性名<span class="number">3</span> = 参数<span class="number">3</span>;</span><br><span class="line">     <span class="built_in">this</span>.方法名 = 函数体;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>构造函数的调用格式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var obj &#x3D; new 构造函数名(实参1，实参2，实参3)</span><br></pre></td></tr></table></figure>

<p>以上代码中，obj即接收到构造函数创建出来的对象。</p>
</li>
<li><p>注意事项</p>
<ol>
<li>  构造函数约定<strong>首字母大写</strong>。</li>
<li>  函数内的属性和方法前面需要添加 <strong>this</strong> ，表示当前对象的属性和方法。</li>
<li>  构造函数中<strong>不需要 return 返回结果</strong>。</li>
<li>  当我们创建对象的时候，<strong>必须用 new 来调用构造函数</strong>。</li>
</ol>
</li>
<li><p>其他</p>
<p> 构造函数，如 Stars()，抽象了对象的公共部分，封装到了函数里面，它泛指某一大类（class）<br> 创建对象，如 new Stars()，特指某一个，通过 new 关键字创建对象的过程我们也称为对象实例化</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>new关键字的作用</p>
<ol>
<li>在构造函数代码开始执行之前，创建一个空对象；</li>
<li>修改this的指向，把this指向创建出来的空对象；</li>
<li>执行函数的代码</li>
<li>在函数完成之后，返回this—即创建出来的对象</li>
</ol>
<h3 id="遍历对象"><a href="#遍历对象" class="headerlink" title="遍历对象"></a>遍历对象</h3><pre><code>for...in 语句用于对数组或者对象的属性进行循环操作。

其语法如下：</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (变量 <span class="keyword">in</span> 对象名字) &#123;</span><br><span class="line">    <span class="comment">// 在此执行代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<pre><code>语法中的变量是自定义的，它需要符合命名规范，通常我们会将这个变量写为 k 或者 key。</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(k);      <span class="comment">// 这里的 k 是属性名</span></span><br><span class="line">    <span class="built_in">console</span>.log(obj[k]); <span class="comment">// 这里的 obj[k] 是属性值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<hr>
<h3 id="Math对象"><a href="#Math对象" class="headerlink" title="Math对象"></a>Math对象</h3><p>​        Math 对象不是构造函数，它具有数学常数和函数的属性和方法。跟数学相关的运算（求绝对值，取整、最大值等）可以使用 Math 中的成员。</p>
<table>
<thead>
<tr>
<th>属性、方法名</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>Math.PI</td>
<td>圆周率</td>
</tr>
<tr>
<td>Math.floor()</td>
<td>向下取整</td>
</tr>
<tr>
<td>Math.ceil()</td>
<td>向上取整</td>
</tr>
<tr>
<td>Math.round()</td>
<td>四舍五入版 就近取整   注意 -3.5   结果是  -3</td>
</tr>
<tr>
<td>Math.abs()</td>
<td>绝对值</td>
</tr>
<tr>
<td>Math.max()/Math.min()</td>
<td>求最大和最小值</td>
</tr>
<tr>
<td>Math.random()</td>
<td>获取范围在[0,1)内的随机值</td>
</tr>
</tbody></table>
<p>​    <strong>获取指定范围内的随机整数</strong>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandom</span>(<span class="params">min, max</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (max - min + <span class="number">1</span>)) + min; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="日期对象"><a href="#日期对象" class="headerlink" title="日期对象"></a>日期对象</h3><p>​         Date 对象和 Math 对象不一样，Date是一个构造函数，所以使用时需要实例化后才能使用其中具体方法和属性。Date 实例用来处理日期和时间</p>
<ul>
<li><p>使用Date实例化日期对象</p>
<ul>
<li>获取当前时间必须实例化：</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br></pre></td></tr></table></figure>

<ul>
<li>获取指定时间的日期对象</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> future = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&#x27;2019/5/1&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>注意：如果创建实例时并未传入参数，则得到的日期对象是当前时间对应的日期对象</p>
</li>
<li><p>通过Date实例获取总毫米数</p>
<ul>
<li><p>总毫秒数的含义</p>
<p>​    基于1970年1月1日（世界标准时间）起的毫秒数</p>
</li>
<li><p>获取总毫秒数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实例化Date对象</span></span><br><span class="line"><span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="comment">// 1. 用于获取对象的原始值</span></span><br><span class="line"><span class="built_in">console</span>.log(date.valueOf())	</span><br><span class="line"><span class="built_in">console</span>.log(date.getTime())	</span><br><span class="line"><span class="comment">// 2. 简单写可以这么做</span></span><br><span class="line"><span class="keyword">var</span> now = + <span class="keyword">new</span> <span class="built_in">Date</span>();			</span><br><span class="line"><span class="comment">// 3. HTML5中提供的方法，有兼容性问题</span></span><br><span class="line"><span class="keyword">var</span> now = <span class="built_in">Date</span>.now();</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<hr>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js基础语法</tag>
      </tags>
  </entry>
  <entry>
    <title>css部分基础语法</title>
    <url>/2020/12/14/css/css%E9%83%A8%E5%88%86%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<p>css基础语法总结</p>
<a id="more"></a>
<hr>
<h4 id="基础选择器"><a href="#基础选择器" class="headerlink" title="基础选择器"></a>基础选择器</h4><h5 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h5><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h3</span> &#123; </span><br><span class="line">	<span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h5><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.class</span> &#123; </span><br><span class="line">	<span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h5><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#class</span> &#123; </span><br><span class="line">	<span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="通配符选择器"><a href="#通配符选择器" class="headerlink" title="通配符选择器"></a>通配符选择器</h5><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">* &#123; </span><br><span class="line">	<span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h4><h5 id="font-size"><a href="#font-size" class="headerlink" title="font-size"></a>font-size</h5><p>用于设置字号</p>
<h5 id="font-family"><a href="#font-family" class="headerlink" title="font-family"></a>font-family</h5><p>用于设置哪一种字体</p>
<table>
<thead>
<tr>
<th>字体名称</th>
<th>英文名称</th>
<th>Unicode 编码</th>
</tr>
</thead>
<tbody><tr>
<td>宋体</td>
<td>SimSun</td>
<td>\5B8B\4F53</td>
</tr>
<tr>
<td>新宋体</td>
<td>NSimSun</td>
<td>\65B0\5B8B\4F53</td>
</tr>
<tr>
<td>黑体</td>
<td>SimHei</td>
<td>\9ED1\4F53</td>
</tr>
<tr>
<td>微软雅黑</td>
<td>Microsoft YaHei</td>
<td>\5FAE\8F6F\96C5\9ED1</td>
</tr>
<tr>
<td>楷体_GB2312</td>
<td>KaiTi_GB2312</td>
<td>\6977\4F53_GB2312</td>
</tr>
<tr>
<td>隶书</td>
<td>LiSu</td>
<td>\96B6\4E66</td>
</tr>
<tr>
<td>幼园</td>
<td>YouYuan</td>
<td>\5E7C\5706</td>
</tr>
<tr>
<td>华文细黑</td>
<td>STXihei</td>
<td>\534E\6587\7EC6\9ED1</td>
</tr>
<tr>
<td>细明体</td>
<td>MingLiU</td>
<td>\7EC6\660E\4F53</td>
</tr>
<tr>
<td>新细明体</td>
<td>PMingLiU</td>
<td>\65B0\7EC6\660E\4F53</td>
</tr>
</tbody></table>
<h5 id="font-weight"><a href="#font-weight" class="headerlink" title="font-weight"></a>font-weight</h5><p>用于设置字体粗细</p>
<table>
<thead>
<tr>
<th>属性值</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td>normal</td>
<td align="left">默认值（不加粗的）</td>
</tr>
<tr>
<td>bold</td>
<td align="left">定义粗体（加粗的）</td>
</tr>
<tr>
<td>100~900</td>
<td align="left">400 等同于 normal，而 700 等同于 bold</td>
</tr>
</tbody></table>
<hr>
<h4 id="外观属性"><a href="#外观属性" class="headerlink" title="外观属性"></a>外观属性</h4><h5 id="color"><a href="#color" class="headerlink" title="color"></a>color</h5><p>文本颜色</p>
<h5 id="text-align"><a href="#text-align" class="headerlink" title="text-align"></a>text-align</h5><p>文本水平对齐方式</p>
<table>
<thead>
<tr>
<th>属性</th>
<th align="center">解释</th>
</tr>
</thead>
<tbody><tr>
<td>left</td>
<td align="center">左对齐（默认值）</td>
</tr>
<tr>
<td>right</td>
<td align="center">右对齐</td>
</tr>
<tr>
<td>center</td>
<td align="center">居中对齐</td>
</tr>
</tbody></table>
<h5 id="line-height"><a href="#line-height" class="headerlink" title="line-height"></a>line-height</h5><p>行间距</p>
<h5 id="text-indent"><a href="#text-indent" class="headerlink" title="text-indent"></a>text-indent</h5><p>首行缩进</p>
<h5 id="text-decoration"><a href="#text-decoration" class="headerlink" title="text-decoration"></a>text-decoration</h5><p>用于给链接修改装饰效果</p>
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>none</td>
<td>默认。定义标准的文本。 取消下划线（最常用）</td>
</tr>
<tr>
<td>underline</td>
<td>定义文本下的一条线。下划线 也是我们链接自带的（常用）</td>
</tr>
<tr>
<td>overline</td>
<td>定义文本上的一条线。（不用）</td>
</tr>
<tr>
<td>line-through</td>
<td>定义穿过文本下的一条线。（不常用）</td>
</tr>
</tbody></table>
<hr>
<h4 id="复合选择器"><a href="#复合选择器" class="headerlink" title="复合选择器"></a>复合选择器</h4><h5 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h5><p><code>.class h3&#123;color:red;font-size:16px;&#125;</code></p>
<h5 id="子元素选择器"><a href="#子元素选择器" class="headerlink" title="子元素选择器"></a>子元素选择器</h5><p><code>.class&gt;h3&#123;color:red;font-size:14px;&#125;</code></p>
<h5 id="交集选择器"><a href="#交集选择器" class="headerlink" title="交集选择器"></a>交集选择器</h5><p><code>p.one   选择的是： 类名为 .one  的 段落标签。  </code></p>
<h5 id="并集选择器"><a href="#并集选择器" class="headerlink" title="并集选择器"></a>并集选择器</h5><p><code>.one, p , #test &#123;color: #F00;&#125; </code></p>
<h5 id="链接伪类选择器"><a href="#链接伪类选择器" class="headerlink" title="链接伪类选择器"></a>链接伪类选择器</h5><ul>
<li>a:link      /* 未访问的链接 */</li>
<li>a:visited   /* 已访问的链接 */</li>
<li>a:hover     /* 鼠标移动到链接上 */</li>
<li>a:active    /* 选定的链接 */</li>
</ul>
<hr>
<h4 id="标签显示模式（display）"><a href="#标签显示模式（display）" class="headerlink" title="标签显示模式（display）"></a>标签显示模式（display）</h4><h5 id="块级元素"><a href="#块级元素" class="headerlink" title="块级元素"></a>块级元素</h5><ul>
<li>块级元素的特点</li>
</ul>
<p>（1）比较霸道，自己独占一行</p>
<p>（2）高度，宽度、外边距以及内边距都可以控制。</p>
<p>（3）宽度默认是容器（父级宽度）的100%</p>
<p>（4）是一个容器及盒子，里面可以放行内或者块级元素。</p>
<ul>
<li>注意：<ul>
<li>只有文字才能组成段落 , 因此 p  里面不能放块级元素，特别是 p 不能放div </li>
<li>同理还有这些标签h1,h2,h3,h4,h5,h6,dt，他们都是文字类块级标签，里面不能放其他块级元素。</li>
</ul>
</li>
</ul>
<p><code>常见的块元素有&lt;h1&gt;~&lt;h6&gt;、&lt;p&gt;、&lt;div&gt;、&lt;ul&gt;、&lt;ol&gt;、&lt;li&gt;等，其中&lt;div&gt;标签是最典型的块元素。</code></p>
<h5 id="行内元素"><a href="#行内元素" class="headerlink" title="行内元素"></a>行内元素</h5><ul>
<li>行内元素的特点：</li>
</ul>
<p>（1）相邻行内元素在一行上，一行可以显示多个。</p>
<p>（2）高、宽直接设置是无效的。</p>
<p>（3）默认宽度就是它本身内容的宽度。</p>
<p>（4）<strong>行内元素只能容纳文本或则其他行内元素。</strong></p>
<ul>
<li>注意：</li>
</ul>
<p>链接里面不能再放链接。<br>特殊情况a里面可以放块级元素，但是给a转换一下块级模式最安全。</p>
<p><code>常见的行内元素有&lt;a&gt;、&lt;strong&gt;、&lt;b&gt;、&lt;em&gt;、&lt;i&gt;、&lt;del&gt;、&lt;s&gt;、&lt;ins&gt;、&lt;u&gt;、&lt;span&gt;等，其中&lt;span&gt;标签最典型的行内元素。</code></p>
<h5 id="行内块元素"><a href="#行内块元素" class="headerlink" title="行内块元素"></a>行内块元素</h5><p>行内块元素的特点：</p>
<p>（1）和相邻行内元素（行内块）在一行上,但是之间会有空白缝隙。一行可以显示多个<br>（2）默认宽度就是它本身内容的宽度。<br>（3）高度，行高、外边距以及内边距都可以控制。</p>
<p><code>在行内元素中有几个特殊的标签——&lt;img /&gt;、&lt;input /&gt;、&lt;td&gt;，可以对它们设置宽高和对齐属性，有些资料可能会称它们为行内块元素</code></p>
<hr>
<h4 id="background"><a href="#background" class="headerlink" title="background"></a>background</h4><h5 id="背景简写"><a href="#背景简写" class="headerlink" title="背景简写"></a>背景简写</h5><p><code>background: transparent url(image.jpg) repeat-y  scroll center top ;</code></p>
<hr>
<h4 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h4><ul>
<li>权重计算公式</li>
</ul>
<table>
<thead>
<tr>
<th>标签选择器</th>
<th>计算权重公式</th>
</tr>
</thead>
<tbody><tr>
<td>继承或者 *</td>
<td>0,0,0,0</td>
</tr>
<tr>
<td>每个元素（标签选择器）</td>
<td>0,0,0,1</td>
</tr>
<tr>
<td>每个类，伪类</td>
<td>0,0,1,0</td>
</tr>
<tr>
<td>每个ID</td>
<td>0,1,0,0</td>
</tr>
<tr>
<td>每个行内样式 style=””</td>
<td>1,0,0,0</td>
</tr>
<tr>
<td>每个!important  重要的</td>
<td>∞ 无穷大</td>
</tr>
</tbody></table>
<hr>
<h4 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h4><p>待补充。</p>
<hr>
<h4 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h4><h5 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h5><p> 为什么要清除浮动？</p>
<p>我们很多时候不方便给父盒子的高度，因为我们不清除有多少子盒子，有多少内容。经常的做法会让内容撑开父盒子的高度。<br>但是如果父盒子中有子盒子浮动了之后，就会影响到后面的盒子，因为浮动元素脱离了标准流。会把后面还在标准流的盒子覆盖，解决这个问题的方法就要清除浮动。</p>
<blockquote>
<p><strong>清除浮动的本质：</strong> 为解决父级元素因为子级浮动引起高度为0的问题</p>
</blockquote>
<p>如何清除浮动？</p>
<p> 清除浮动其实叫做 闭合浮动 更合适，因为是把浮动的元素圈起来，让父元素闭合出口和入口不让他们出来影响其他的元素。 在CSS中，clear属性用于清除浮动，其基本语法格式如下：</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  选择器 &#123; clear : 属性值 ; &#125;</span><br><span class="line">&#x2F;*属性值为left,清除左侧浮动的影响</span><br><span class="line">  属性值为right,清除右侧浮动的影响</span><br><span class="line">  属性值为both,同时清除左右两侧浮动的影响*&#x2F;</span><br></pre></td></tr></table></figure>

<h5 id="额外标签法"><a href="#额外标签法" class="headerlink" title="额外标签法"></a>额外标签法</h5><h6 id="末尾标签法"><a href="#末尾标签法" class="headerlink" title="末尾标签法"></a>末尾标签法</h6><p> 通过在浮动元素的末尾添加一个空的标签。这是W3C推荐的做法，虽然比较简单，但是添加了无意义的标签，结构化比较差，所以不推荐使用。下面三种写法都适用：<br> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--写法一：直接用style--&gt;</span><br><span class="line">&lt;div style&#x3D;&quot;clear:both&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--写法二：使用clear类--&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">.clear &#123; clear:both &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;clear&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--写法三：可以使用br等别的块级元素来清除浮动--&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">.clear &#123; clear:both &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line">&lt;br class&#x3D;&quot;clear&quot; &#x2F;&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<h6 id="内部标签法"><a href="#内部标签法" class="headerlink" title="内部标签法"></a>内部标签法</h6><p> 把div放进父盒子里，这样盒子会撑开，一般也不会用。</p>
<h5 id="overflow"><a href="#overflow" class="headerlink" title="overflow"></a>overflow</h5><p> 给父级元素添加overflow样式方法。</p>
<p>这种方法代码比较简洁，可以通过触发BFC方式，但是因为本身overflow的本质是 溢出隐藏 的效果，所以有的时候也会有一些问题存在，比如内容增多的时候不会自动换行导致内容被隐藏掉，无法显示出要溢出的元素。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.father &#123;</span><br><span class="line">    overflow: auto;  </span><br><span class="line">  &#x2F;* 加上这句话，就可以清除浮动   overflow &#x3D; hidden|auto|scroll 都可以实现*&#x2F;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="伪元素法（最常用）"><a href="#伪元素法（最常用）" class="headerlink" title="伪元素法（最常用）"></a>伪元素法（最常用）</h5><h6 id="使用after伪元素清除浮动"><a href="#使用after伪元素清除浮动" class="headerlink" title="使用after伪元素清除浮动"></a>使用after伪元素清除浮动</h6><p>after是在父元素中加一个盒子，这个元素是通过css添加上去的，符合闭合浮动思想，结构语义化正确。 父元素中加一个类名为clearfix 。但是这个方法IE6-IE7不识别，要进行兼容，使用zoom:1触发hasLayout来清除浮动</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.clearfix:after&#123;</span><br><span class="line">    content:&quot;.&quot;;  &#x2F;*尽量不要为空，一般写一个点*&#x2F;</span><br><span class="line">    height:0;     &#x2F;*盒子高度为0，看不见*&#x2F;</span><br><span class="line">    display:block;    &#x2F;*插入伪元素是行内元素，要转化为块级元素*&#x2F;</span><br><span class="line">    visibility:hidden;      &#x2F;*content有内容，将元素隐藏*&#x2F;</span><br><span class="line">    clear:both;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.clearfix &#123;</span><br><span class="line">    *zoom: 1;   &#x2F;*  *只有IE6,7识别 *&#x2F;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h6 id="after伪元素空余字符法"><a href="#after伪元素空余字符法" class="headerlink" title="after伪元素空余字符法"></a>after伪元素空余字符法</h6><p>父元素中加一个类名为clearfix，也需要兼容IE6-IE7</p>
<blockquote>
<p>在Unicode字符里有一个“零宽度空格”，即U+200B，代替“.”，可以减少代码量，不再使用visibility:hidden</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.clearfix::after&#123;</span><br><span class="line">    content:&quot;\200B&quot;;   &#x2F;* content:&#39;\0200&#39;; 也可以 *&#x2F;</span><br><span class="line">    display:block;</span><br><span class="line">    height:0;</span><br><span class="line">    clear:both;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.clearfix &#123;</span><br><span class="line">    *zoom: 1; </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h6 id="使用before和after双伪元素清除浮动（推荐）"><a href="#使用before和after双伪元素清除浮动（推荐）" class="headerlink" title="使用before和after双伪元素清除浮动（推荐）"></a>使用before和after双伪元素清除浮动（推荐）</h6><p>这种方法完全符合闭合浮动思想。给父元素加一个类名为clearfix,需要兼容IE6-IE7</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.clearfix:before, .clearfix:after &#123;</span><br><span class="line">     content: &quot;&quot;; </span><br><span class="line">     display: table;</span><br><span class="line"> &#125;</span><br><span class="line"> .clearfix:after &#123;</span><br><span class="line">     clear: both;</span><br><span class="line"> &#125;</span><br><span class="line"> .clearfix &#123;</span><br><span class="line">     *zoom: 1;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<hr>
<h4 id="切图"><a href="#切图" class="headerlink" title="切图"></a>切图</h4><ul>
<li><p>使用切片工具（ps）</p>
</li>
<li><p>选中要切的区域</p>
</li>
<li><p>导出存储为web格式</p>
</li>
</ul>
<hr>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css基础语法</tag>
      </tags>
  </entry>
  <entry>
    <title>html部分基础语法</title>
    <url>/2020/12/14/html/html%E9%83%A8%E5%88%86%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<p>html基础语法总结</p>
<a id="more"></a>
<hr>
<h4 id="常用标签"><a href="#常用标签" class="headerlink" title="常用标签"></a>常用标签</h4><h5 id="排版标签"><a href="#排版标签" class="headerlink" title="排版标签"></a>排版标签</h5><h6 id="h"><a href="#h" class="headerlink" title="h"></a>h</h6><p>标题标签</p>
<h6 id="p"><a href="#p" class="headerlink" title="p"></a>p</h6><p>段落</p>
<h6 id="hr"><a href="#hr" class="headerlink" title="hr"></a>hr</h6><p>水平线</p>
<h6 id="br"><a href="#br" class="headerlink" title="br"></a>br</h6><p>换行</p>
<h6 id="div"><a href="#div" class="headerlink" title="div"></a>div</h6><p>盒子 , 没有语义</p>
<h6 id="span"><a href="#span" class="headerlink" title="span"></a>span</h6><p>盒子 , 没有语义</p>
<hr>
<h5 id="文本格式化标签"><a href="#文本格式化标签" class="headerlink" title="文本格式化标签"></a>文本格式化标签</h5><h6 id="b-strong"><a href="#b-strong" class="headerlink" title="b/strong"></a>b/strong</h6><p>文字以粗体方式显示(XHTML推荐使用strong)</p>
<h6 id="i-em"><a href="#i-em" class="headerlink" title="i/em"></a>i/em</h6><p>文字以斜体方式显示(XHTML推荐使用em)</p>
<h6 id="s-del"><a href="#s-del" class="headerlink" title="s/del"></a>s/del</h6><p>文字以加删除线方式显示(XHTML推荐使用del)</p>
<h6 id="u-ins"><a href="#u-ins" class="headerlink" title="u/ins"></a>u/ins</h6><p>文字以加下划线方式显示(XHTML推荐使用ins)</p>
<hr>
<h5 id="img"><a href="#img" class="headerlink" title="img"></a>img</h5><p><code>&lt;img src=&quot;图像URL&quot; /&gt;</code></p>
<h5 id="a"><a href="#a" class="headerlink" title="a"></a>a</h5><p><code>&lt;a href=&quot;跳转目标&quot; target=&quot;目标窗口的弹出方式&quot;&gt;文本或图像&lt;/a&gt;</code></p>
<h5 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h5><p><code>  &lt;!-- 注释语句 --&gt;     快捷键是：    ctrl + /       或者 ctrl +shift + /</code></p>
<hr>
<h4 id="锚点"><a href="#锚点" class="headerlink" title="锚点"></a>锚点</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//  1. 使用相应的id名标注跳转目标的位置。</span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">id</span>=<span class="string">&quot;two&quot;</span>&gt;</span>第2集<span class="tag">&lt;/<span class="name">h3</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">//2. 使用<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#id名&quot;</span>&gt;</span>链接文本<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#two&quot;</span>&gt;</span>   </span><br></pre></td></tr></table></figure>

<hr>
<h4 id="base-标签"><a href="#base-标签" class="headerlink" title="base 标签"></a>base 标签</h4><p><code>&lt;base target=&quot;_blank&quot; /&gt;</code></p>
<p>**总结： **</p>
<ol>
<li>base 可以设置整体链接的打开状态   </li>
<li>base 写到  <head>  </head>  之间</li>
<li>把所有的连接 都默认添加 target=”_blank”</li>
</ol>
<hr>
<h4 id="pre"><a href="#pre" class="headerlink" title="pre"></a>pre</h4><p>预格式化文本标签。<br>在 pre 标签 元素中的文本通常会保留空格和换行符。而文本也会呈现为等宽字体。</p>
<hr>
<h4 id="部分符号"><a href="#部分符号" class="headerlink" title="部分符号"></a>部分符号</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">空格   //<span class="symbol">&amp;nbsp;</span> </span><br><span class="line"></span><br><span class="line">&lt;     //<span class="symbol">&amp;lt;</span></span><br><span class="line"></span><br><span class="line">&gt;     //<span class="symbol">&amp;gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h4 id="table"><a href="#table" class="headerlink" title="table"></a>table</h4><p>定义一个表格</p>
<h5 id="tr"><a href="#tr" class="headerlink" title="tr"></a>tr</h5><p>定义表格中的行</p>
<h5 id="td"><a href="#td" class="headerlink" title="td"></a>td</h5><p>定义表格中的单元格，必须嵌套在 tr 标签中</p>
<h5 id="cellspacing"><a href="#cellspacing" class="headerlink" title="cellspacing"></a>cellspacing</h5><p>设置单元格与单元格边框之间的空白间距<br>平时开发cellspacing  为  0</p>
<h5 id="cellpadding"><a href="#cellpadding" class="headerlink" title="cellpadding"></a>cellpadding</h5><p>设置单元格内容与单元格边框之间的空白间距<br>平时开发cellpadding   为  0</p>
<h5 id="th"><a href="#th" class="headerlink" title="th"></a>th</h5><p>表头单元格标签,一般表头单元格位于表格的第一行或第一列，并且文本加粗居中<br>用th替代相应的td即可。</p>
<h5 id="caption"><a href="#caption" class="headerlink" title="caption"></a>caption</h5><p>定义表格标题，通常这个标题会被居中且显示于表格之上。<br>caption 标签必须紧随 table 标签之后。</p>
<h5 id="合并单元格"><a href="#合并单元格" class="headerlink" title="合并单元格"></a>合并单元格</h5><ul>
<li>跨行合并：rowspan=”合并单元格的个数”      </li>
<li>跨列合并：colspan=”合并单元格的个数”</li>
</ul>
<hr>
<h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><p>只讲下自定义列表</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>名词1<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>名词1解释1<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>名词1解释2<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>名词2<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>名词2解释1<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>名词2解释2<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h4 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h4><h5 id="input-控件"><a href="#input-控件" class="headerlink" title="input 控件"></a>input 控件</h5><p><code>&lt;input type=&quot;属性值&quot; value=&quot;你好&quot;&gt;</code></p>
<h5 id="label标签"><a href="#label标签" class="headerlink" title="label标签"></a>label标签</h5><p>label标签主要目的是为了提高用户体验。 </p>
<ul>
<li>第一种用法就是用label直接包括input表单, 适合单个表单选择</li>
</ul>
<p><code>&lt;label&gt; 用户名： &lt;input type=&quot;radio&quot; name=&quot;usename&quot; value=&quot;请输入用户名&quot;&gt;   &lt;/label&gt;</code></p>
<ul>
<li>第二种用法 for 属性规定 label 与哪个表单元素绑定</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;sex&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>  <span class="attr">id</span>=<span class="string">&quot;sex&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="textarea控件"><a href="#textarea控件" class="headerlink" title="textarea控件"></a>textarea控件</h5><p>通过textarea控件可以轻松地创建多行文本输入框</p>
<h5 id="select下拉列表"><a href="#select下拉列表" class="headerlink" title="select下拉列表"></a>select下拉列表</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>选项1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>选项2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>选项3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h4 id="form表单域"><a href="#form表单域" class="headerlink" title="form表单域"></a>form表单域</h4><p>在HTML中，form标签被用于定义表单域，以实现用户信息的收集和传递，form中的所有内容都会被提交给服务器。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;url地址&quot;</span> <span class="attr">method</span>=<span class="string">&quot;提交方式&quot;</span> <span class="attr">name</span>=<span class="string">&quot;表单名称&quot;</span>&gt;</span></span><br><span class="line">  各种表单控件</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h4 id="忘了查文档"><a href="#忘了查文档" class="headerlink" title="忘了查文档"></a>忘了查文档</h4><p>W3C :  <a href="http://www.w3school.com.cn/">http://www.w3school.com.cn/</a></p>
<p>MDN: <a href="https://developer.mozilla.org/zh-CN/">https://developer.mozilla.org/zh-CN/</a></p>
<hr>
]]></content>
      <categories>
        <category>html</category>
      </categories>
      <tags>
        <tag>html基础语法</tag>
      </tags>
  </entry>
  <entry>
    <title>jQuery部分基础语法</title>
    <url>/2020/12/13/jQuery/jQuery%E9%83%A8%E5%88%86%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<p>jQuery基础语法总结</p>
<a id="more"></a>
<hr>
<h4 id="下载引入jQuery"><a href="#下载引入jQuery" class="headerlink" title="下载引入jQuery"></a>下载引入jQuery</h4><p><a href="https://code.jquery.com/">https://code.jquery.com</a></p>
<hr>
<h4 id="入口函数"><a href="#入口函数" class="headerlink" title="入口函数"></a>入口函数</h4><p>两种入口函数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(function() &#123;   </span><br><span class="line">    ...</span><br><span class="line">&#125;); </span><br><span class="line">&#x2F;&#x2F;较常用</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(document).ready(function()&#123;</span><br><span class="line">   ...</span><br><span class="line">&#125;);</span><br><span class="line">&#x2F;&#x2F;不常用</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="jQuery-对象和-DOM-对象转换"><a href="#jQuery-对象和-DOM-对象转换" class="headerlink" title="jQuery 对象和 DOM 对象转换"></a>jQuery 对象和 DOM 对象转换</h4><ul>
<li>DOM 对象转换成 jQuery 对象。一种方法。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var box &#x3D; document.getElementById(&#39;box&#39;); &#x2F;&#x2F; 获取DOM对象</span><br><span class="line">var jQueryObject &#x3D; $(box);  &#x2F;&#x2F; 把DOM对象转换为jQuery对象</span><br></pre></td></tr></table></figure>

<ul>
<li>jQuery 对象转换为 DOM 对象。两种方法。</li>
</ul>
<p><code>var domObject1 = $(&#39;div&#39;)[0]</code></p>
<p><code>var domObject2 = $(&#39;div&#39;).get(0)</code></p>
<hr>
<h4 id="jQuery-选择器"><a href="#jQuery-选择器" class="headerlink" title="jQuery 选择器"></a>jQuery 选择器</h4><p>待补充。</p>
<hr>
<h4 id="jQuery-样式操作"><a href="#jQuery-样式操作" class="headerlink" title="jQuery 样式操作"></a>jQuery 样式操作</h4><h5 id="css-方法"><a href="#css-方法" class="headerlink" title="css 方法"></a>css 方法</h5><p><code>$(div).css(&#39;&#39;color&#39;&#39;, &#39;&#39;red&#39;&#39;);</code></p>
<h5 id="类方法"><a href="#类方法" class="headerlink" title="类方法"></a>类方法</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 添加类</span></span><br><span class="line">$(<span class="string">&quot;div&quot;</span>).addClass(<span class="string">&quot;current&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除类</span></span><br><span class="line">$(<span class="string">&quot;div&quot;</span>).removeClass(<span class="string">&quot;current&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 切换类</span></span><br><span class="line">$(<span class="string">&quot;div&quot;</span>).toggleClass(<span class="string">&quot;current&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<hr>
<h4 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h4><h5 id="显示-隐藏"><a href="#显示-隐藏" class="headerlink" title="显示/隐藏"></a>显示/隐藏</h5><p>三个方法：show() / hide() / toggle() 。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;button&gt;显示&lt;/button&gt;</span><br><span class="line">    &lt;button&gt;隐藏&lt;/button&gt;</span><br><span class="line">    &lt;button&gt;切换&lt;/button&gt;</span><br><span class="line">    &lt;div&gt;&lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            $(<span class="string">&quot;button&quot;</span>).eq(<span class="number">0</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                $(<span class="string">&quot;div&quot;</span>).show(<span class="number">1000</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                    alert(<span class="number">1</span>);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;)</span><br><span class="line">            $(<span class="string">&quot;button&quot;</span>).eq(<span class="number">1</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                $(<span class="string">&quot;div&quot;</span>).hide(<span class="number">1000</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                    alert(<span class="number">1</span>);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;)</span><br><span class="line">            $(<span class="string">&quot;button&quot;</span>).eq(<span class="number">2</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">              $(<span class="string">&quot;div&quot;</span>).toggle(<span class="number">1000</span>);</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="comment">// 一般情况下不加参数直接显示隐藏</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<h5 id="滑入-滑出"><a href="#滑入-滑出" class="headerlink" title="滑入/滑出"></a>滑入/滑出</h5><p>三个方法：slideDown() / slideUp() / slideToggle() 。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;button&gt;下拉滑动&lt;/button&gt;</span><br><span class="line">    &lt;button&gt;上拉滑动&lt;/button&gt;</span><br><span class="line">    &lt;button&gt;切换滑动&lt;/button&gt;</span><br><span class="line">    &lt;div&gt;&lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            $(<span class="string">&quot;button&quot;</span>).eq(<span class="number">0</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="comment">// 下滑动 slideDown()</span></span><br><span class="line">                $(<span class="string">&quot;div&quot;</span>).slideDown();</span><br><span class="line">            &#125;)</span><br><span class="line">            $(<span class="string">&quot;button&quot;</span>).eq(<span class="number">1</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="comment">// 上滑动 slideUp()</span></span><br><span class="line">                $(<span class="string">&quot;div&quot;</span>).slideUp(<span class="number">500</span>);</span><br><span class="line">            &#125;)</span><br><span class="line">            $(<span class="string">&quot;button&quot;</span>).eq(<span class="number">2</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="comment">// 滑动切换 slideToggle()</span></span><br><span class="line">                $(<span class="string">&quot;div&quot;</span>).slideToggle(<span class="number">500</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<h5 id="淡入-淡出"><a href="#淡入-淡出" class="headerlink" title="淡入/淡出"></a>淡入/淡出</h5><p>四个方法：fadeIn() / fadeOut() / fadeToggle() / fadeTo() 。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;button&gt;淡入效果&lt;/button&gt;</span><br><span class="line">    &lt;button&gt;淡出效果&lt;/button&gt;</span><br><span class="line">    &lt;button&gt;淡入淡出切换&lt;/button&gt;</span><br><span class="line">    &lt;button&gt;修改透明度&lt;/button&gt;</span><br><span class="line">    &lt;div&gt;&lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            $(<span class="string">&quot;button&quot;</span>).eq(<span class="number">0</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="comment">// 淡入 fadeIn()</span></span><br><span class="line">                $(<span class="string">&quot;div&quot;</span>).fadeIn(<span class="number">1000</span>);</span><br><span class="line">            &#125;)</span><br><span class="line">            $(<span class="string">&quot;button&quot;</span>).eq(<span class="number">1</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="comment">// 淡出 fadeOut()</span></span><br><span class="line">                $(<span class="string">&quot;div&quot;</span>).fadeOut(<span class="number">1000</span>);</span><br><span class="line">            &#125;)</span><br><span class="line">            $(<span class="string">&quot;button&quot;</span>).eq(<span class="number">2</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="comment">// 淡入淡出切换 fadeToggle()</span></span><br><span class="line">                $(<span class="string">&quot;div&quot;</span>).fadeToggle(<span class="number">1000</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">            $(<span class="string">&quot;button&quot;</span>).eq(<span class="number">3</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="comment">//  修改透明度 fadeTo() 速度和透明度必须写</span></span><br><span class="line">                $(<span class="string">&quot;div&quot;</span>).fadeTo(<span class="number">1000</span>, <span class="number">0.5</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<h5 id="自定义动画"><a href="#自定义动画" class="headerlink" title="自定义动画"></a>自定义动画</h5><p>animate() 。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;button&gt;动起来&lt;/button&gt;</span><br><span class="line">    &lt;div&gt;&lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            $(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                $(<span class="string">&quot;div&quot;</span>).animate(&#123;</span><br><span class="line">                    left: <span class="number">500</span>,</span><br><span class="line">                    top: <span class="number">300</span>,</span><br><span class="line">                    opacity: <span class="number">.4</span>,</span><br><span class="line">                    width: <span class="number">500</span></span><br><span class="line">                &#125;, <span class="number">500</span>);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<h5 id="取消此动画之前的所有动画"><a href="#取消此动画之前的所有动画" class="headerlink" title="取消此动画之前的所有动画"></a>取消此动画之前的所有动画</h5><p>stop() 。</p>
<h5 id="动画事件切换"><a href="#动画事件切换" class="headerlink" title="动画事件切换"></a>动画事件切换</h5><p>hover() 。<br>功能类似 css 中的伪类 :hover 。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">hover([over,]out)     </span><br><span class="line"><span class="comment">// 其中over和out为两个函数</span></span><br><span class="line"><span class="comment">// over:鼠标移到元素上要触发的函数（相当于mouseenter）</span></span><br><span class="line"><span class="comment">// out:鼠标移出元素要触发的函数（相当于mouseleave）</span></span><br><span class="line"><span class="comment">// 如果只写一个函数，则鼠标经过和离开都会触发它</span></span><br></pre></td></tr></table></figure>
<hr>
<h4 id="元素属性操作"><a href="#元素属性操作" class="headerlink" title="元素属性操作"></a>元素属性操作</h4><p>prop() / attr() / data() 。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="comment">// element.prop(&quot;属性名&quot;) 获取元素固有的属性值 </span></span><br><span class="line">     $(<span class="string">&quot;a&quot;</span>).prop(<span class="string">&quot;title&quot;</span>, <span class="string">&quot;我们都挺好&quot;</span>);</span><br><span class="line">    </span><br><span class="line">     <span class="comment">// 元素的自定义属性 通过 attr()</span></span><br><span class="line">     $(<span class="string">&quot;div&quot;</span>).attr(<span class="string">&quot;index&quot;</span>, <span class="number">4</span>);</span><br><span class="line">     </span><br><span class="line">     <span class="comment">// 数据缓存 data() 里面的数据是存放在元素的内存里面</span></span><br><span class="line">     $(<span class="string">&quot;span&quot;</span>).data(<span class="string">&quot;uname&quot;</span>, <span class="string">&quot;andy&quot;</span>);</span><br><span class="line">      &#125;)</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="文本属性值操作"><a href="#文本属性值操作" class="headerlink" title="文本属性值操作"></a>文本属性值操作</h4><p>html() / text() / val()。<br>分别对应js中的 innerHTML 、innerText 和 value 属性。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取设置元素内容 html()</span></span><br><span class="line">$(<span class="string">&quot;div&quot;</span>).html();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取设置元素文本内容 text()</span></span><br><span class="line">$(<span class="string">&quot;div&quot;</span>).text(<span class="string">&quot;123&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取设置表单值 val()</span></span><br><span class="line">$(<span class="string">&quot;input&quot;</span>).val(<span class="string">&quot;123&quot;</span>);</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="元素遍历、创建、添加、删除操作"><a href="#元素遍历、创建、添加、删除操作" class="headerlink" title="元素遍历、创建、添加、删除操作"></a>元素遍历、创建、添加、删除操作</h4><h5 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h5><ul>
<li>方法一：</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;div&quot;</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params">index,domEle</span>) </span>&#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//  each()方法遍历匹配的每一个元素。主要用DOM处理。</span></span><br><span class="line"><span class="comment">//  里面的回调函数有2个参数: index是每个元素的索引号; demEle是每个DOM元素对象，不是jquery对象</span></span><br><span class="line"><span class="comment">//  需要给这个dom元素转换为jquery对象$(domEle)</span></span><br></pre></td></tr></table></figure>

<ul>
<li>方法二：</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$.each(object, <span class="function"><span class="keyword">function</span>(<span class="params">index,element</span>) </span>&#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//  $.each()方法可用于遍历任何对象。主要用于数据处理，比如数组，对象</span></span><br><span class="line"><span class="comment">//  里面的函数有2个参数: index是每个元素的索引号; element遍历内容</span></span><br></pre></td></tr></table></figure>

<h5 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h5><p><code>$(&quot;&lt;li&gt;&lt;/li&gt;&quot;);</code></p>
<h5 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h5><ul>
<li>内部添加</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">element.append(<span class="string">&quot;内容&quot;</span>);</span><br><span class="line"><span class="comment">//  把内容放入匹配元素内部最后面，类似原生appendChild。</span></span><br><span class="line"></span><br><span class="line">element.prepend(<span class="string">&quot;内容&quot;</span>);</span><br><span class="line"><span class="comment">//  把内容放入匹配元素内部最前面。</span></span><br></pre></td></tr></table></figure>

<ul>
<li>外部添加</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">element.after(<span class="string">&quot;内容&quot;</span>);</span><br><span class="line"><span class="comment">//把内容放入目标元素后面</span></span><br><span class="line"></span><br><span class="line">element.before(<span class="string">&quot;内容&quot;</span>);</span><br><span class="line"><span class="comment">//把内窖放入目标元素前面</span></span><br></pre></td></tr></table></figure>
<h5 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">element.remove();</span><br><span class="line"><span class="comment">//删除匹配的元素（本身)</span></span><br><span class="line"></span><br><span class="line">element.empty();</span><br><span class="line"><span class="comment">//删除匹配的元素集合中所有的子节点</span></span><br><span class="line"></span><br><span class="line">element.htmI(<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="comment">//清空匹配的元素内容</span></span><br><span class="line"><span class="comment">//empt()和 htmI(&quot;&quot;)作用等价，都可以删除元素里面的内容，只不过 html还可以设置内容</span></span><br></pre></td></tr></table></figure>

<hr>
<h4 id="元素位置操作"><a href="#元素位置操作" class="headerlink" title="元素位置操作"></a>元素位置操作</h4><p>offset()、position()、scrollTop()/scrollLeft() 。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;father&quot;</span>&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;son&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">//  获取设置距离文档的位置（偏移） offset</span></span><br><span class="line">            $(<span class="string">&quot;.son&quot;</span>).offset();</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//  获取距离带有定位父级位置（偏移） position 。  如果没有带有定位的父级，则以文档为准 。</span></span><br><span class="line">            <span class="comment">// 这个方法只能获取不能设置偏移</span></span><br><span class="line">            $(<span class="string">&quot;.son&quot;</span>).position();</span><br><span class="line">      </span><br><span class="line">            <span class="comment">//  被卷去的头部 scrollTop()  / 被卷去的左侧 scrollLeft()</span></span><br><span class="line">            $(<span class="built_in">document</span>).scrollTop(<span class="number">100</span>);</span><br><span class="line">            $(<span class="built_in">document</span>).scrollLeft(<span class="number">100</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h4><h5 id="事件注册"><a href="#事件注册" class="headerlink" title="事件注册"></a>事件注册</h5><p>优点: 操作简单，且不用担心事件覆盖等问题。<br>缺点: 普通的事件注册不能做事件委托，且无法实现事件解绑，需要借助其他方法。</p>
<p><code>element.事件(function() &#123;&#125;)</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt;&lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 单个事件注册</span></span><br><span class="line">            $(<span class="string">&quot;div&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                $(<span class="built_in">this</span>).css(<span class="string">&quot;background&quot;</span>, <span class="string">&quot;purple&quot;</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">            $(<span class="string">&quot;div&quot;</span>).mouseenter(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                $(<span class="built_in">this</span>).css(<span class="string">&quot;background&quot;</span>, <span class="string">&quot;skyblue&quot;</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<h5 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h5><p>on(): 用于事件绑定，目前最好用的事件绑定方法<br>off(): 事件解绑<br>trigger() / triggerHandler(): 事件触发</p>
<ul>
<li>on()</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt;&lt;/div&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;我们都是好孩子&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;我们都是好孩子&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;我们都是好孩子&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;ol&gt;&lt;/ol&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// (1) on可以绑定1个或者多个事件处理程序</span></span><br><span class="line">            <span class="comment">// $(&quot;div&quot;).on(&#123;</span></span><br><span class="line">            <span class="comment">//     mouseenter: function() &#123;</span></span><br><span class="line">            <span class="comment">//         $(this).css(&quot;background&quot;, &quot;skyblue&quot;);</span></span><br><span class="line">            <span class="comment">//     &#125;,</span></span><br><span class="line">            <span class="comment">//     click: function() &#123;</span></span><br><span class="line">            <span class="comment">//         $(this).css(&quot;background&quot;, &quot;purple&quot;);</span></span><br><span class="line">            <span class="comment">//     &#125;</span></span><br><span class="line">            <span class="comment">// &#125;);</span></span><br><span class="line">            $(<span class="string">&quot;div&quot;</span>).on(<span class="string">&quot;mouseenter mouseleave&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                $(<span class="built_in">this</span>).toggleClass(<span class="string">&quot;current&quot;</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">  </span><br><span class="line">            <span class="comment">// (2) on可以实现事件委托（委派）</span></span><br><span class="line">            <span class="comment">// click 是绑定在ul 身上的，但是 触发的对象是 ul 里面的小li</span></span><br><span class="line">            <span class="comment">// $(&quot;ul li&quot;).click();</span></span><br><span class="line">            $(<span class="string">&quot;ul&quot;</span>).on(<span class="string">&quot;click&quot;</span>, <span class="string">&quot;li&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                alert(<span class="number">11</span>);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// (3) on可以给未来动态创建的元素绑定事件</span></span><br><span class="line">            $(<span class="string">&quot;ol&quot;</span>).on(<span class="string">&quot;click&quot;</span>, <span class="string">&quot;li&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                alert(<span class="number">11</span>);</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="keyword">var</span> li = $(<span class="string">&quot;&lt;li&gt;我是后来创建的&lt;/li&gt;&quot;</span>);</span><br><span class="line">            $(<span class="string">&quot;ol&quot;</span>).append(li);</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>off()</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//  事件解绑 off </span></span><br><span class="line">        $(<span class="string">&quot;div&quot;</span>).off();  <span class="comment">// 这个是解除了div身上的所有事件</span></span><br><span class="line">        $(<span class="string">&quot;div&quot;</span>).off(<span class="string">&quot;click&quot;</span>); <span class="comment">// 这个是解除了div身上的点击事件</span></span><br><span class="line">        $(<span class="string">&quot;ul&quot;</span>).off(<span class="string">&quot;click&quot;</span>, <span class="string">&quot;li&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  one() 但是它只能触发事件一次</span></span><br><span class="line">        $(<span class="string">&quot;p&quot;</span>).one(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            alert(<span class="number">11</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li> trigger() /  triggerHandler() </li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt;&lt;/div&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;text&quot;</span>&gt;</span><br><span class="line">      </span><br><span class="line">    &lt;script&gt;</span><br><span class="line">    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 绑定事件</span></span><br><span class="line">      $(<span class="string">&quot;div&quot;</span>).on(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="number">11</span>);</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 自动触发事件</span></span><br><span class="line">      <span class="comment">// 1. 元素.事件()</span></span><br><span class="line">      <span class="comment">// $(&quot;div&quot;).click();会触发元素的默认行为</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 2. 元素.trigger(&quot;事件&quot;)</span></span><br><span class="line">      <span class="comment">// $(&quot;div&quot;).trigger(&quot;click&quot;);会触发元素的默认行为</span></span><br><span class="line">      $(<span class="string">&quot;input&quot;</span>).trigger(<span class="string">&quot;focus&quot;</span>);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 3. 元素.triggerHandler(&quot;事件&quot;) 就是不会触发元素的默认行为</span></span><br><span class="line">      $(<span class="string">&quot;input&quot;</span>).on(<span class="string">&quot;focus&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="built_in">this</span>).val(<span class="string">&quot;你好吗&quot;</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="comment">// 一个会获取焦点，一个不会</span></span><br><span class="line">      $(<span class="string">&quot;div&quot;</span>).triggerHandler(<span class="string">&quot;click&quot;</span>);</span><br><span class="line">      <span class="comment">// $(&quot;input&quot;).triggerHandler(&quot;focus&quot;);</span></span><br><span class="line">    &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<h5 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">element.on(events, [selector] , <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//  阻止默认行为:event.preventDefault()或者return false</span></span><br><span class="line"><span class="comment">//  阻止冒泡:event.stopPropagation()</span></span><br></pre></td></tr></table></figure>

<hr>
<h4 id="拷贝对象"><a href="#拷贝对象" class="headerlink" title="拷贝对象"></a>拷贝对象</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$.extend([deep] , target, object1, [objectN]);</span><br><span class="line"></span><br><span class="line"><span class="comment">//  1.deep:如果设为true为深拷贝，默认为false 浅拷贝。</span></span><br><span class="line"><span class="comment">//  2.target:要拷贝的目标对象。</span></span><br><span class="line"><span class="comment">//  3.object1:待拷贝到第一个对象的对象。</span></span><br><span class="line"><span class="comment">//  4.objectN:待拷贝到第N个对象的对象。</span></span><br><span class="line"><span class="comment">//  5.浅拷贝目标对象引用的被拷贝的对象地址，修改目标对象会影响被拷贝对象。</span></span><br><span class="line"><span class="comment">//  6.深拷贝，前面加true，完全克隆，修改目标对象不会影响被拷贝对象。</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">       $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  			<span class="comment">// 1.合并数据</span></span><br><span class="line">           <span class="keyword">var</span> targetObj = &#123;&#125;;</span><br><span class="line">           <span class="keyword">var</span> obj = &#123;</span><br><span class="line">               id: <span class="number">1</span>,</span><br><span class="line">               name: <span class="string">&quot;andy&quot;</span></span><br><span class="line">           &#125;;</span><br><span class="line">           <span class="comment">// $.extend(target, obj);</span></span><br><span class="line">           $.extend(targetObj, obj);</span><br><span class="line">           <span class="built_in">console</span>.log(targetObj);</span><br><span class="line">  </span><br><span class="line">  			<span class="comment">// 2. 会覆盖 targetObj 里面原来的数据</span></span><br><span class="line">           <span class="keyword">var</span> targetObj = &#123;</span><br><span class="line">               id: <span class="number">0</span></span><br><span class="line">           &#125;;</span><br><span class="line">           <span class="keyword">var</span> obj = &#123;</span><br><span class="line">               id: <span class="number">1</span>,</span><br><span class="line">               name: <span class="string">&quot;andy&quot;</span></span><br><span class="line">           &#125;;</span><br><span class="line">           <span class="comment">// $.extend(target, obj);</span></span><br><span class="line">           $.extend(targetObj, obj);</span><br><span class="line">           <span class="built_in">console</span>.log(targetObj); </span><br><span class="line">       &#125;)</span><br><span class="line">   &lt;/script&gt;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="多库共存"><a href="#多库共存" class="headerlink" title="多库共存"></a>多库共存</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  解决方案:</span></span><br><span class="line"><span class="comment">//  1.把里面的$符号统一改为jQuery</span></span><br><span class="line">jQuery(<span class="string">&quot;div&quot;</span><span class="string">&quot;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">//  2. jQuery变量规定新的名称: $.noConflict()</span></span><br><span class="line"><span class="string">var xx = $.noConflict();</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">	$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  		<span class="comment">// 让jquery 释放对$ 控制权 让用自己决定</span></span><br><span class="line">  		<span class="keyword">var</span> suibian = jQuery.noConflict();</span><br><span class="line">  		<span class="built_in">console</span>.log(suibian(<span class="string">&quot;span&quot;</span>));</span><br><span class="line">	&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<hr>
<h4 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h4><h5 id="插件网站"><a href="#插件网站" class="headerlink" title="插件网站"></a>插件网站</h5><ol>
<li> jQuery 插件库  <a href="http://www.jq22.com/">http://www.jq22.com/</a>     </li>
<li> jQuery 之家   <a href="http://www.htmleaf.com/">http://www.htmleaf.com/</a> </li>
</ol>
<ul>
<li>jQuery 插件使用步骤：</li>
</ul>
<ol>
<li> 引入相关文件。（jQuery 文件 和 插件文件）    </li>
<li> 复制相关html、css、js (调用插件)。</li>
</ol>
<h5 id="瀑布流插件"><a href="#瀑布流插件" class="headerlink" title="瀑布流插件"></a>瀑布流插件</h5><p>jQuery 之家   <a href="http://www.htmleaf.com/">http://www.htmleaf.com/</a> </p>
<h5 id="图片懒加载插件"><a href="#图片懒加载插件" class="headerlink" title="图片懒加载插件"></a>图片懒加载插件</h5><p>待补充。</p>
<h5 id="全屏滚动插件"><a href="#全屏滚动插件" class="headerlink" title="全屏滚动插件"></a>全屏滚动插件</h5><p><a href="http://www.dowebok.com/demo/2014/77/">http://www.dowebok.com/demo/2014/77/</a></p>
<hr>
<h4 id="bootstrap"><a href="#bootstrap" class="headerlink" title="bootstrap"></a>bootstrap</h4><h5 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h5><p><a href="https://v4.bootcss.com/">https://v4.bootcss.com/</a></p>
<h5 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h5><p>-步骤</p>
<p>1.引入bootstrap相关css和js<br>2.去官网复制html</p>
<h5 id="插件-1"><a href="#插件-1" class="headerlink" title="插件"></a>插件</h5><p>-步骤</p>
<p> 1.引入bootstrap相关css和js<br> 2.去官网复制html<br> 3.复制js代码，启动js插件</p>
<hr>
]]></content>
      <categories>
        <category>jQuery</category>
      </categories>
      <tags>
        <tag>jQuery基础语法</tag>
      </tags>
  </entry>
  <entry>
    <title>flex布局</title>
    <url>/2020/12/13/css/flex%E5%B8%83%E5%B1%80/</url>
    <content><![CDATA[<p>flex布局</p>
<a id="more"></a>
<h2 id="flex布局原理"><a href="#flex布局原理" class="headerlink" title="flex布局原理"></a>flex布局原理</h2><ul>
<li>flex 是 flexible Box 的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性，任何一个容器都可以指定为 flex 布局。</li>
<li>当我们为父盒子设为 flex 布局以后，子元素的 float、clear 和 vertical-align 属性将失效。</li>
<li>flex布局又叫伸缩布局 、弹性布局 、伸缩盒布局 、弹性盒布局 。</li>
<li>采用 Flex 布局的元素，称为 Flex 容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称”项目”。</li>
</ul>
<h2 id="父项常见属性"><a href="#父项常见属性" class="headerlink" title="父项常见属性"></a>父项常见属性</h2><ul>
<li>flex-direction：设置主轴的方向</li>
<li>justify-content：设置主轴上的子元素排列方式</li>
<li>flex-wrap：设置子元素是否换行  </li>
<li>align-content：设置侧轴上的子元素的排列方式（多行）</li>
<li>align-items：设置侧轴上的子元素排列方式（单行）</li>
<li>flex-flow：复合属性，相当于同时设置了 flex-direction 和 flex-wrap</li>
</ul>
<h2 id="子项常见属性"><a href="#子项常见属性" class="headerlink" title="子项常见属性"></a>子项常见属性</h2><ul>
<li>flex子项目占的份数</li>
<li>align-self控制子项自己在侧轴的排列方式</li>
<li>order属性定义子项的排列顺序（前后顺序）</li>
</ul>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>-flex布局</tag>
      </tags>
  </entry>
  <entry>
    <title>越努力越幸运</title>
    <url>/2020/12/13/%E9%9A%8F%E7%AC%94/bad/</url>
    <content><![CDATA[<hr>
<blockquote class="blockquote-center">人的一切痛苦本质上都是对自己无能的愤怒</blockquote>
 ​​​]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>越努力越幸运</tag>
      </tags>
  </entry>
  <entry>
    <title>龙三Sakura和绘梨衣</title>
    <url>/2020/12/11/%E9%9A%8F%E7%AC%94/longzu3/</url>
    <content><![CDATA[<p>“世界喜不喜欢你，只取决于你的朋友喜不喜欢你，每个人都有几个真正的好朋友，他们喜欢你，就是这个世界喜欢你了。”</p>
<p>“什么是好朋友？”绘梨衣在小本子上写。</p>
<p>“就是那种很神经病的朋友，不管怎么样都会相信你，不管怎么样都会跟你在一起，”说到这里的时候忽然有种巨大的悲伤和强烈的酸楚充斥着他的鼻腔，路明非不知道那种情绪从何而来，只觉得自己要被那冰冷的、浩荡的悲伤淹没，他说：“如果世界真的不喜欢你，那世界就是我的敌人了。”</p>
]]></content>
      <categories>
        <category>青春幻想文学</category>
      </categories>
  </entry>
</search>
